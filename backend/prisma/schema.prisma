// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(cuid())
  username String @unique
  fullName String
  password String
  gender Gender
  profilePic String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  conversationsIds String[]

  conversations Conversation[]
  messages Message[]
 
  friendships FriendShip[] @relation("UserFriendships") 
  friendOf FriendShip[] @relation("UserFriends") 

  friendRequestsSent FriendRequest[] @relation("SentRequests")
  friendRequestsReceived FriendRequest[] @relation("ReceivedRequests")
}

model FriendShip {
  id String @id @default(cuid())

  userId String
  user User @relation("UserFriendships", fields: [userId], references: [id])

  friendId String
  friend User @relation("UserFriends", fields: [friendId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, friendId])
}


model FriendRequest {
  id String @id @default(cuid())

  sender User @relation("SentRequests", fields: [senderId], references: [id])
  senderId String

  receiver User @relation("ReceivedRequests", fields: [receiverId], references: [id])
  receiverId String

  createdAt DateTime @default(now())

  status FriendRequestStatus @default(PENDING) // track if accepted, rejected, pending

  @@unique([senderId, receiverId])
}

model Conversation {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participantIds String[]
  participants User[]

  messageIds String[]
  messages Message[]
}

model Message {
  id String @id @default(cuid())

  conversationId String
  conversation Conversation @relation(fields:[conversationId], references:[id])

  senderId String
  sender User @relation(fields: [senderId], references: [id])

  body String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  male
  female
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}